#pragma kernel CSMain

struct Ray
{
    float3 origin, direction;
};

struct HitData
{
    float distance;
    float3 normal;
    uint iterations;
};

static const uint MaxSteps = 48;
static const float MinDistance = 0.01f;
static const float infinity = 3.402823466e+38;
static const float FractalIterations = 16;

RWTexture2D<float4> Result;

float4x4 CameraToWorld, CameraInverseProjection;

float Power;
float3 ColorMix;

Ray CreateRay(float3 origin, float3 direction)
{
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;

    return ray;
}

Ray CreateCameraRay(float2 uv)
{
    float3 origin = mul(CameraToWorld, float4(0, 0, 0, 1)).xyz;
    float3 direction = mul(CameraInverseProjection, float4(uv, 0, 1)).xyz;
    direction = mul(CameraToWorld, float4(direction, 0)).xyz;
    direction = normalize(direction);

    return CreateRay(origin, direction);
}

HitData CreateHitData(float distance, float3 normal, uint iterations)
{
    HitData hit;
    hit.distance = distance;
    hit.normal = normal;
    hit.iterations = iterations;

    return hit;
}

float GetDistance(float3 position)
{
    float3 z = position;
    float dr = 1;
    float r = 0;

    for (int i = 0; i < FractalIterations; i++)
    {
        r = length(z);
        if (r > 2) break;

        float theta = acos(z.z / r);
        float phi = atan2(z.y, z.x);
        dr = pow(r, Power - 1.0f) * Power * dr + 1.0f;

        float zr = pow(r, Power);
        theta *= Power;
        phi *= Power;

        z = zr * float3(sin(theta) * cos(phi), sin(phi) * sin(theta), cos(theta));
        z += position;
    }

    return 0.5f * log(r) * r / dr;
}

float3 GetNormal(float3 position)
{
    float distance = GetDistance(position);
    float2 e = float2(0.015f, 0);

    float3 normal = distance - float3(
        GetDistance(position - e.xyy),
        GetDistance(position - e.yxy),
        GetDistance(position - e.yyx));

    return normalize(normal);
}

HitData RayMarch(Ray ray)
{
    float distance = 0;
    float3 normal = 0;
    float3 color = 0;
    uint i;

    for (i = 0; i < MaxSteps; i++)
    {
        float currentDistance = GetDistance(ray.origin);
        ray.origin += currentDistance * ray.direction;
        distance += currentDistance;

        if (currentDistance <= MinDistance)
        {
            normal = GetNormal(ray.origin);
            break;
        }
    }

    return CreateHitData(distance, normal, i);
}

float3 GetLightColor(float3 normal)
{
    float3 lightDirection = float3(-1, -1, 1);
    float3 lightColor = float3(1.0f, 0.956f, 0.8392f);
    float lightIntensity = 0.1f;

    float light = dot(normal, -lightDirection) + 1;
    return lerp(0.25f, 1, light) * lightColor * lightIntensity;
}

[numthreads(32,32,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    float width, height;
    Result.GetDimensions(width, height);

    float2 uv = id.xy / float2(width, height) * 2 - 1;
    Ray ray = CreateCameraRay(uv);

    HitData hit = RayMarch(ray);

    float3 lightColor = GetLightColor(hit.normal);
    float3 distanceColor = 1.0f - float(hit.iterations) / float(MaxSteps);
    float3 color = saturate(lightColor * ColorMix + distanceColor);

    Result[id.xy] = float4(color, 0);
}
